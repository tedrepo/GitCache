# 参考位置: flask生产环境部署
#   地址: https://blog.csdn.net/weixin_30588827/article/details/94846031
#   执行命令: uwsgi --ini uwsgi.ini
#   使用  lsof-i tcp:5000 查看 启动的服务
[uwsgi]
# 配置启动的服务地址和ip
http=127.0.0.1:5056
# 项目目录
chdir= /Users/zhangxiaoshan/workspace/GitCache
# 用于管理 uwsgi 的启动和关闭的
# 相关命令参考地址 uwsgi服务启动(start)停止(stop)重新装载(reload)
#         https://blog.csdn.net/weixin_39584758/article/details/80356000
stats=%(chdir)/bin/uwsgi/uwsgi.status
pidfile=%(chdir)/bin/uwsgi/uwsgi.pid

# 启动uwsgi的用户名和用户组
uid=root
gid=root
#flask项目必须的配置
callable= app
#指定虚拟环境路径，这个就是python环境的路径
#home=/workspace/python_env/flask_online

# 防止报错: may have been in progress in another thread when fork() was called.
# 参考位置： https://github.com/20tab/uwsgi-emperor-mode
# 这里设置没有用
# 可行的是在 .zshrc 中 export 这个环境变量
# 参考地址: http://jz6.cn/post/34
env=OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# 指定项目启动文件,该路径是相对于 chdir目录来的
wsgi-file = run.py

# 启用主进程
master=true
# 进程个数
workers=5
# 自动移除unix Socket和pid文件当服务停止的时候
vacuum=true
# 序列化接受的内容，如果可能的话
thunder-lock=true
# 启用线程
enable-threads=true
# 设置自中断时间
harakiri=30
# 设置缓冲
post-buffering=4096

# 设置日志保存位置  uWSGI提供了仅将日志记录到文件的参数，即logto
logto=%(chdir)/log/applog.log
# 设置daemonize在将日志记录到文件的同时，也会让uWSGI进程进入后台
# 但在Ubuntu 15.04的systemd下，这样会造成因为uWSGI相应超时而被强行kill。
daemonize=%(chdir)/log/applog.log

